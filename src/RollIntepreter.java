/** A utility class used to calculate the outcome of any given roll
 *
 * @author Hans de los Santos
  */
public class RollIntepreter {
    private RollIntepreter() {}

    /**
     * Given three dice rolls, returns the outcome of the roll in a RollResult, detailing if it's an instant win, an instant loss, or neither, what the outcome was in a string, and the score for the roll if applicable
     * <p>
     *     PRECONDITION: Rolls is of length 3 and contains integers only in range 1-6, inclusive
     *
     * @param rolls 3 integers from 1-6, representing 3 dice rolls
     * @return The outcome of the roll
     */
    public static RollResult determineResult(int[] rolls) {
        int[] rollFrequencies = rollFrequencies(rolls);
        int matchedRolls = matchingRolls(rollFrequencies);
        if (matchedRolls == 3) {
            return new RollResult(true, false, "triple");
        } else if (matchingNumbers(rolls, new int[] {4, 5, 6})) {
            return new RollResult(true, false, "456");
        } else if (matchingNumbers(rolls, new int[] {1, 2, 3})) {
            return new RollResult(false, true, "123");
        } else if (matchedRolls == 2) {
            return new RollResult(false, false, "double", scoreFromDouble(rollFrequencies));
        } else {
            return new RollResult(false, false, "unmatched");
        }
    }

    /**
     * Given a list of frequencies of dice rolls (where each index corresponds to the number of times that index appears as a roll in a given 3 dice rolls, returned by rollFrequencies()), returns the greatest frequency.
     * In other words, returns a 1, a 2 or a 3, signifying whether the roll was unmatched, double or triple
     *
     * @param rollFrequencies A list of frequencies of dice rolls
     * @return How many times the most frequent roll appeared
     */
    private static int matchingRolls(int[] rollFrequencies) {
        int maxFrequency = 0;
        for (int frequency : rollFrequencies) {
            if (frequency > maxFrequency) {
                maxFrequency = frequency;
            }
        }
        return maxFrequency;
    }

    /**
     * Given three dice rolls and three numbers to match to them, returns whether the rolls match the three numbers, regardless of order
     * <p>
     *     PRECONDITION: Both lists are of length 3
     *
     * @param rolls Three dice rolls, integers from 1 to 6
     * @param nums Three numbers to match up to, also integers from 1 to 6
     * @return If the two lists match up (regardless of order)
     */
    private static boolean matchingNumbers(int[] rolls, int[] nums) {
        int matches = 0;
        int[] tempRolls = new int[3];
        int[] tempNums = new int[3];
        for (int i = 0; i < tempRolls.length; i++) {
            tempRolls[i] = rolls[i];
            tempNums[i] = nums[i];
        }
        for (int tempRoll : tempRolls) {
            for (int i = 0; i < tempNums.length; i++) {
                if (tempRoll == tempNums[i]) {
                    matches++;
                    tempNums[i] = -1;
                }
            }
        }
        return matches == 3;
    }

    /**
     * Given a list of roll frequencies, returns a score for the dice rolls.
     * In other words, returns the only number that only appeared once in the set of rolls
     *
     * @param rollFrequencies A list of frequencies of dice rolls
     * @return The score generated by the roll
     */
    private static int scoreFromDouble(int[] rollFrequencies) {
        for (int i = 1; i < rollFrequencies.length; i++) {
            if (rollFrequencies[i] == 1) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Given a list of 3 rolls, returns a list of roll frequencies--that is, how many times a number appears in the list.
     * <p>
     *     PRECONDITION: Rolls contains numbers only between 1 and 6, inclusive
     *
     * @param rolls A list of 3 dice rolls
     * @return A list of times a certain roll appears in the list, where each possible outcome of a die, 1 to 6, is the index corresponding to the frequency at which it appears in the list of rolls.
     */
    private static int[] rollFrequencies(int[] rolls) {
        int[] rollFrequencies = new int[7];
        for (int roll : rolls) {
            rollFrequencies[roll]++;
        }
        return rollFrequencies;
    }
}
